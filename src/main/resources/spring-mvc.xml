<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/task
						http://www.springframework.org/schema/task/spring-task-3.2.xsd">
		
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">    
        <property name="converters">    
            <list>    
                <bean class="org.ht.util.DateConverter" />    
            </list>    
        </property>    
   	</bean>  
   	
	<mvc:annotation-driven conversion-service="conversionService" />

	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="org.ht.controller.*" />
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<context:component-scan base-package="org.ht.util.*"  />
	
	<!-- 定时器配置 
    task:executor/@pool-size：可以指定执行线程池的初始大小、最大大小 
    task:executor/@queue-capacity：等待执行的任务队列的容量 
    task:executor/@rejection-policy：当等待队已满时的策略，分为丢弃、由任务执行器直接运行等方式 
   -->
	<!-- 定时器 -->
	<task:scheduler id="scheduler" pool-size="10" />

	<task:executor id="executor" keep-alive="3600" pool-size="100-200"

		queue-capacity="500" rejection-policy="CALLER_RUNS" />

	<task:annotation-driven executor="executor"
		scheduler="scheduler" />
	
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
		
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	 <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址  -->
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="0"  />
	</bean> 
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp"/>
		<property name="order" value="1"/>
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
   <bean id="springContextHolder" class="org.ht.util.SpringContextHolder" lazy-init="false"/>
   
    <!-- 配置quartz -->
	<!-- 任务实例化 -->   
	<!-- 第一个定时器 -->
	<!--
	
	<bean id="myJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		  <property name="Durability" value="true"/>
		<property name="jobClass" value="org.ht.util.SimpleTriggerJob" />
	</bean>
	第二个定时器
	<bean id="cronJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		  <property name="Durability" value="true"/>
		<property name="jobClass" value="org.ht.util.CronTriggerJob" />
	</bean>
	这个定时器是到达指定的时间去执行
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		这个属性是为了解决这个的报错：  SchedulerException: Jobs added with no trigger must be durable.
		<property name="jobDetail" ref="cronJob"/>
		cron表达式的解释自己去百度。。。。
		<property name="cronExpression" value="0 5 16 * * ?"/>
	</bean>
	<bean id="myTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="myJob"/>
		<property name="startDelay" value="2000"/>每隔2秒执行一次
		<property name="repeatInterval" value="5000"/>
	</bean>
	触发定时器
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			把定时器加入列表
				<ref bean="myTrigger"/>
				<ref bean="cronTrigger"/>
			</list>
		</property>
	</bean> -->
	<!-- 配置quartz -->
</beans>